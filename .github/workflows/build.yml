name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ARTIFACT_REPO: opencodeco/static-php-cli

jobs:
  build-and-push:
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          - tag: "8.3"
            arch: "arm64"
            runner: "ubuntu-latest-arm64"
            artifact-name: "php-cli-8.3-linux-aarch64-glibc"
            artifact-id: "3535941010"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download PHP artifact
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Download the specific artifact by ID using GitHub API
        curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GH_TOKEN" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ env.ARTIFACT_REPO }}/actions/artifacts/${{ matrix.artifact-id }}/zip \
          -o artifact.zip
        
        # Extract the artifact
        unzip artifact.zip -d ./php-binary
        
        # Make the PHP binary executable
        chmod +x ./php-binary/php

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.tag }}-${{ matrix.arch }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-manifest:
    if: github.event_name != 'pull_request'
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create and push multi-arch manifest
      run: |
        # For now, we only have ARM64, so we'll just tag it as the main version
        docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:8.3 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:8.3-arm64
        docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:8.3
